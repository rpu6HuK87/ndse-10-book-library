</div>

<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
        integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
        crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx"
        crossorigin="anonymous"></script>

<script>
const pathname = location.pathname.split('/')
let room
//console.log(pathname)
//если открыли книгу, цепляемся к room
if(pathname.length === 3 && pathname[1] == 'books' && pathname[2] != 'create') {
  room = pathname[2]
  console.log(room)
  
  const socket = io.connect('/', {
    transports: ['websocket'],
    protocols: ['my-protocol-v1'],
    query: {'roomName': room}
  })
  const connstate = document.getElementById('connstate')
  const form = document.getElementById('formmsg')
  const input = document.getElementById('mymsg')
  const chatbox = document.getElementById('chatbox')
  const chathist = document.getElementById('chathist')
  const userscnt = document.getElementById('userscnt')
  const userlist = document.getElementById('userlist')
  let loaded = false
  let yourname
  

  const myMsg = (data) => {
    return `
      <li class="clearfix">
          <div class="message-data">
              <span>Я</span>
              <span class="badge badge-light">${new Date(data.timestamp).toLocaleString()}</span>
          </div>
          <div class="message my-message">${data.msg}</div>                                    
      </li>`
  }
  const arrivedMsg = (data) => {
    return `
      <li class="clearfix">
          <div class="message-data text-right">
              <span class="badge badge-light">${new Date(data.timestamp).toLocaleString()}</span>
              <span>${data.username}</span>
          </div>
          <div class="message other-message float-right">${data.msg}</div>
      </li>`
  }
  function appendMsg(msg) {
    chatbox.insertAdjacentHTML('beforeend', msg)
    chathist.scrollTop = chathist.scrollHeight
  }
  function userList(list) {
    let l = 'Вы'
    userscnt.textContent = list.length
    list.filter(name => name != yourname).map(name => l = name ?  l + ', ' + name : l + ', аноним')
    userlist.setAttribute('title', l)
  }

  let msgdata

  form.addEventListener('submit', (e) => {
    e.preventDefault()
    const msg = input.value.trim()
    if(msg){
      msgdata = {msg: msg, timestamp: new Date()}
      socket.emit('message-to-room', msgdata)
    }      
  })

  socket.on('message-to-room-sended', () => {
    input.value = ''
    const msg = myMsg(msgdata)
    appendMsg(msg)
  })
  socket.on('message-to-room', (msgdata) => {
    const msg = arrivedMsg(msgdata)
    appendMsg(msg)
  })
  socket.on('all-messages', (payload) => {
    if(payload.allmsgs && !loaded) {
      loaded = true
      payload.allmsgs.forEach(msg => {
        const msgdata = JSON.parse(msg)
        const m = (msgdata.username == payload.yourname) ? myMsg(msgdata) : arrivedMsg(msgdata)
        appendMsg(m)
      })
    }
    yourname = payload.yourname
    userList(payload.userlist)
  })
  socket.on('someone-connected-disconnected', (userlist) => {
    userList(userlist)
  })
  socket.on('logout-client', () => {
    window.location.href = '/logout'
  })
  

  //CONNECT-DISCONNECT
  socket.on('connect', () => {
    connstate.textContent = 'Онлайн'
    connstate.classList.remove('text-warning')
    connstate.classList.add('text-success')
  })
  socket.on('disconnect', () => {
    connstate.textContent = 'Оффлайн, подключение..'
    connstate.classList.add('text-warning')
    connstate.classList.remove('text-success')
    userscnt.textContent = '#'
  })  
}

</script>        
</body>
</html>